graphhopper:

  # OpenStreetMap input file PBF or XML, can be changed via command line -Ddw.graphhopper.datareader.file=some.pbf
  datareader.file: south-africa-latest.osm.pbf
  
  # Local folder used by GraphHopper to store its data
  graph.location: graph-cache

  ##### Routing Profiles ####

  # Routing can be done only for profiles listed below. For more information about profiles and custom profiles have a look into the documentation at docs/core/profiles.md or the examples under web/src/test/java/com/graphhopper/application/resources/
  # or the CustomWeighting class for the raw details.
  #
  # In general a profile consists of the following
  # - name (required): a unique string identifier for the profile
  # - weighting (optional): by default 'custom'
  # - turn_costs (optional):
  #     vehicle_types: [motorcar, motor_vehicle] (vehicle types used for vehicle-specific turn restrictions)
  #     u_turn_costs: 60 (time-penalty for doing a u-turn in seconds)

  profiles:
    - name: foot
      custom_model_files: [foot.json, foot_elevation.json]

  # You can use the following in-built profiles. After you start GraphHopper it will print which encoded values you'll have to add to graph.encoded_values in this config file.
  # Example of other profile configurations:
  # - name: car
  #     custom_model_files: [car.json]
  # - name: bike
  #     custom_model_files: [bike.json, bike_elevation.json]
  # - name: racingbike
  #     custom_model_files: [racingbike.json, bike_elevation.json]
  # - name: mtb
  #     custom_model_files: [mtb.json, bike_elevation.json]
  # - name: bus
  #     custom_model_files: [bus.json]
  
  # Speed mode:
  # Speeding up routing by doing a special graph preparation (Contraction Hierarchies, CH).
  # Note: This requires more RAM/disk space for holding the prepared graph.
  profiles_ch:
    - profile: foot

  # Hybrid mode:
  # Similar to speed mode, but more flexible. Used for preparing auxiliary data in advance.
  profiles_lm:
    - profile: foot

  #### Encoded Values ####

  # Add additional information to every edge for path details and custom models.
  # Default values include: road_class, road_class_link, road_environment, max_speed, road_access
  # More are: surface, smoothness, max_width, max_height, max_weight, max_weight_except, hgv, max_axle_load, max_length
  #           hazmat, hazmat_tunnel, hazmat_water, lanes, osm_way_id, toll, track_type, mtb_rating, hike_rating, horse_rating,
  #           country, curvature, average_slope, max_slope, car_temporal_access, bike_temporal_access, foot_temporal_access
  graph.encoded_values: foot_access, foot_average_speed, surface, smoothness, max_slope, max_weight, max_height, hike_rating, mtb_rating, foot_priority, average_slope


  #### Elevation ####

  # To populate your graph with elevation data, use SRTM. The default is noop (no elevation).
  # Read more about it in docs/core/elevation.md
  graph.elevation.provider: srtm

  # Specify location for cache (default is /tmp/srtm)
  graph.elevation.cache_dir: ./srtmprovider/

  # If you have a slow disk or plenty of RAM, use RAM_STORE instead of MMAP
  graph.elevation.dataaccess: RAM_STORE

  # Enable bilinear interpolation when sampling elevation at points (default uses nearest neighbor)
  graph.elevation.interpolate: bilinear

  # To smooth edges' elevation profiles (removes elevation fluctuations based on the slope)
  graph.elevation.edge_smoothing: moving_average
  graph.elevation.edge_smoothing.moving_average.window_size: 150  # window size in meters for averaging elevation

  # To increase the resolution of the elevation profile and reduce memory usage
  graph.elevation.long_edge_sampling_distance: 60
  graph.elevation.way_point_max_distance: 10

  #### Country-dependent defaults for max speeds ####

  # Country-specific default maximum speeds based on road types and locations.
  max_speed_calculator.enabled: true

  #### Urban density (built-up areas) ####

  # Classifying roads into 'rural', 'residential', and 'city' areas.
  graph.urban_density.threads: 8
  graph.urban_density.residential_radius: 400
  graph.urban_density.residential_sensitivity: 6000
  graph.urban_density.city_radius: 1500
  graph.urban_density.city_sensitivity: 1000

  #### Subnetworks ####

  # For disconnected components in the road network (e.g., islands), set the minimum size for components.
  prepare.min_network_size: 200
  prepare.subnetworks.threads: 1

  #### Routing ####

  # Limiting maximum visited nodes during routing to avoid excessive runtime.
  routing.max_visited_nodes: 1000000

  # Default routing parameters to prevent long-running requests
  routing.timeout_ms: 300000

  # Control how many active landmarks are picked by default for faster routing.
  routing.lm.active_landmarks: 4

  # You can limit the maximum distance between two consecutive waypoints in flexible routing.
  routing.non_ch.max_waypoint_distance: 1000000

  #### Storage ####

  # To exclude certain types of highways during the OSM import to speed up the process and reduce the graph size.
  import.osm.ignored_highways: motorway
  
  # Memory access settings (recommended: RAM_STORE for better performance).
  graph.dataaccess.default_type: RAM_STORE

  # Will write way names in the preferred language (e.g., 'en' for English).
  datareader.preferred_language: en

  #### Custom Areas ####

  # Read GeoJSON polygons (e.g., custom regions) from the specified directory.
  custom_areas.directory: ""

  #### Country Rules ####

  # Apply country-specific routing rules during OSM import (not enabled by default).
  country_rules.enabled: true

# Dropwizard server configuration
server:
  application_connectors:
    - type: http
      port: 8989
      bind_host: localhost  # Binding to localhost for security reasons.
